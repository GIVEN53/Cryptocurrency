# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
#     paths: [ "OneCoin/Server/**" ]
  # pull_request:
  #   branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    
    env:
      working-directory: ./OneCoin/Server
      S3_BUCKET_NAME: onecoin-s3
      PROPERTIES_PATH: ./OneCoin/Server/src/main/resources/application-dev.properties


    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    # properties secret 설정
    - name: Set application-dev.properties 
      run: |
        touch ${{ env.PROPERTIES_PATH }}
        echo "
        spring.datasource.url=${{ secrets.SPRING_DATASOURCE_URL }}
        spring.datasource.username=${{ secrets.SPRING_DATASOURCE_USERNAME }}
        spring.datasource.password=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
        mail.address.admin=${{ secrets.MAIL_ADDRESS_ADMIN }}
        jwt.secret-key=${{ secrets.JWT_SECRET_KEY }}
        spring.redis.port=${{ secrets.SPRING_REDIS_PORT }}
        spring.redis.host=${{ secrets.SPRING_REDIS_HOST }}
        spring.mail.username=${{ secrets.SPRING_MAIL_USERNAME }}
        spring.mail.password=${{ secrets.SPRING_MAIL_PASSWORD }}
        spring.server.ip=${{ secrets.SPRING_SERVER_IP }}
        spring.security.oauth2.client.registration.kakao.client-id=${{ secrets.KAKAO_CLIENT_ID }}
        spring.security.oauth2.client.registration.kakao.client-secret=${{ secrets.KAKAO_CLIENT_SECRET }}
        " >> ${{ env.PROPERTIES_PATH }}
        
    # 연결 권한 설정
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: ${{ env.working-directory }}
      
    # 빌드
    - name: Build with Gradle
      run: ./gradlew clean build -x test
      working-directory: ${{ env.working-directory }}
    
    # zip 파일 생성
    - name: Make zip file
      run: zip -r ./onecoin.zip .
      shell: bash
      working-directory: ${{ env.working-directory }}
    
    # Access Key와 Secret Access Key를 통해 권한을 확인
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
        aws-region: ap-northeast-2
    
    # 압축한 프로젝트를 S3로 전송합니다.
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./onecoin.zip s3://$S3_BUCKET_NAME/onecoin.zip
      working-directory: ${{ env.working-directory }}
    
    # CodeDeploy에게 배포 명령을 내립니다.
    - name: Code Deploy
      run: >
        aws deploy create-deployment --application-name OneCoinDeploy
        --deployment-config-name CodeDeployDefault.AllAtOnce
        --deployment-group-name OneCoinDeploy-group
        --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=onecoin.zip
